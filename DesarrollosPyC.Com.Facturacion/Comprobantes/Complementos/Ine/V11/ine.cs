// ------------------------------------------------------------------------------
//  <auto-generated>
//    Generated by Xsd2Code. Version 3.4.0.32989
//    <NameSpace>DesarrollosPyC.Com.Facturacion.Comprobantes.Complementos</NameSpace><Collection>List</Collection><codeType>CSharp</codeType><EnableDataBinding>False</EnableDataBinding><EnableLazyLoading>False</EnableLazyLoading><TrackingChangesEnable>False</TrackingChangesEnable><GenTrackingClasses>False</GenTrackingClasses><HidePrivateFieldInIDE>False</HidePrivateFieldInIDE><EnableSummaryComment>True</EnableSummaryComment><VirtualProp>False</VirtualProp><IncludeSerializeMethod>True</IncludeSerializeMethod><UseBaseClass>False</UseBaseClass><GenBaseClass>False</GenBaseClass><GenerateCloneMethod>False</GenerateCloneMethod><GenerateDataContracts>False</GenerateDataContracts><CodeBaseTag>Net35</CodeBaseTag><SerializeMethodName>Serialize</SerializeMethodName><DeserializeMethodName>Deserialize</DeserializeMethodName><SaveToFileMethodName>SaveToFile</SaveToFileMethodName><LoadFromFileMethodName>LoadFromFile</LoadFromFileMethodName><GenerateXMLAttributes>True</GenerateXMLAttributes><OrderXMLAttrib>False</OrderXMLAttrib><EnableEncoding>False</EnableEncoding><AutomaticProperties>False</AutomaticProperties><GenerateShouldSerialize>False</GenerateShouldSerialize><DisableDebug>False</DisableDebug><PropNameSpecified>Default</PropNameSpecified><Encoder>UTF8</Encoder><CustomUsings></CustomUsings><ExcludeIncludedTypes>False</ExcludeIncludedTypes><EnableInitializeFields>False</EnableInitializeFields>
//  </auto-generated>
// ------------------------------------------------------------------------------
namespace DesarrollosPyC.Com.Facturacion.Comprobantes.Complementos.Ine.V11
{
    using System;
    using System.Diagnostics;
    using System.Xml.Serialization;
    using System.Collections;
    using System.Xml.Schema;
    using System.ComponentModel;
    using System.IO;
    using System.Text;
    using System.Collections.Generic;


    /// <summary>
    /// Complemento al Comprobante Fiscal Digital por Internet (CFDI) para incluir los datos que identifiquen el tipo de proceso al que van dirigidos los gastos que realizan los partidos o las Asociaciones Civiles.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1064.2")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true, Namespace = "http://www.sat.gob.mx/ine")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace = "http://www.sat.gob.mx/ine", IsNullable = false)]
    public partial class INE
    {

        private List<INEEntidad> entidadField;

        private string versionField;

        private INETipoProceso tipoProcesoField;

        private INETipoComite tipoComiteField;

        private bool tipoProcesoFieldSpecified;

        private bool tipoComiteFieldSpecified;

        private int idContabilidadField;

        private bool idContabilidadFieldSpecified;

        private static System.Xml.Serialization.XmlSerializer serializer;

        public INE()
        {
            this.versionField = "1.1";
        }

        /// <summary>
        /// Nodo condicional para expresar los datos correspondientes a las entidades federativas en las que se va a aplicar el gasto.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("Entidad")]
        public List<INEEntidad> Entidad
        {
            get
            {
                return this.entidadField;
            }
            set
            {
                this.entidadField = value;
            }
        }

        /// <summary>
        /// Atributo requerido que indica la versión del complemento.
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string Version
        {
            get
            {
                return this.versionField;
            }
            set
            {
                this.versionField = value;
            }
        }

        /// <summary>
        /// Atributo requerido para expresar el tipo de proceso de que se trate.
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public INETipoProceso TipoProceso
        {
            get
            {
                return this.tipoProcesoField;
            }
            set
            {
                this.tipoProcesoField = value;
            }
        }

        /// <summary>
        /// Atributo condicional para expresar el tipo de comité de que se trate.
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public INETipoComite TipoComite
        {
            get
            {
                return this.tipoComiteField;
            }
            set
            {
                this.tipoComiteField = value;
            }
        }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool TipoProcesoSpecified
        {
            get
            {
                return this.tipoProcesoFieldSpecified;
            }
            set
            {
                this.tipoProcesoFieldSpecified = value;
            }
        }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool TipoComiteSpecified
        {
            get
            {
                return this.tipoComiteFieldSpecified;
            }
            set
            {
                this.tipoComiteFieldSpecified = value;
            }
        }

        /// <summary>
        /// Atributo opcional para registrar la clave de contabilidad de aspirantes precandidatos, candidatos y concentradoras, si se trata de un tipo de proceso ordinario y un comité ejecutivo nacional.Para los otros casos, la clave de contabilidad se registra en el atributo ine:Entidad:Contabilidad:IdContabilidad.
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public int IdContabilidad
        {
            get
            {
                return this.idContabilidadField;
            }
            set
            {
                this.idContabilidadField = value;
            }
        }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool IdContabilidadSpecified
        {
            get
            {
                return this.idContabilidadFieldSpecified;
            }
            set
            {
                this.idContabilidadFieldSpecified = value;
            }
        }

        private static System.Xml.Serialization.XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(INE));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current INE object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an INE object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output INE object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out INE obj, out System.Exception exception)
        {
            exception = null;
            obj = default(INE);
            try
            {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string xml, out INE obj)
        {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }

        public static INE Deserialize(string xml)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(xml);
                return ((INE)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        /// <summary>
        /// Serializes current INE object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an INE object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output INE object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out INE obj, out System.Exception exception)
        {
            exception = null;
            obj = default(INE);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out INE obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static INE LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }

    /// <summary>
    /// Nodo condicional para expresar los datos correspondientes a las entidades federativas en las que se va a aplicar el gasto.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1064.2")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true, Namespace = "http://www.sat.gob.mx/ine")]
    public partial class INEEntidad
    {

        private List<INEEntidadContabilidad> contabilidadField;

        private t_ClaveEntidad claveEntidadField;

        private INEEntidadAmbito ambitoField;

        private bool ambitoFieldSpecified;

        private static System.Xml.Serialization.XmlSerializer serializer;

        /// <summary>
        /// Nodo para expresar la clave de contabilidad de aspirantes precandidatos, candidatos y concentradoras.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("Contabilidad")]
        public List<INEEntidadContabilidad> Contabilidad
        {
            get
            {
                return this.contabilidadField;
            }
            set
            {
                this.contabilidadField = value;
            }
        }

        /// <summary>
        /// Atributo requerido para registrar la clave de la entidad a la que aplica el gasto.
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public t_ClaveEntidad ClaveEntidad
        {
            get
            {
                return this.claveEntidadField;
            }
            set
            {
                this.claveEntidadField = value;
            }
        }

        /// <summary>
        /// Atributo condicional para registrar el tipo de ámbito de un proceso de tipo Campaña o Precampaña. este atributo no se debe registrar para los procesos de tipo Ordinario.
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public INEEntidadAmbito Ambito
        {
            get
            {
                return this.ambitoField;
            }
            set
            {
                this.ambitoField = value;
            }
        }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool AmbitoSpecified
        {
            get
            {
                return this.ambitoFieldSpecified;
            }
            set
            {
                this.ambitoFieldSpecified = value;
            }
        }

        private static System.Xml.Serialization.XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(INEEntidad));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current INEEntidad object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an INEEntidad object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output INEEntidad object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out INEEntidad obj, out System.Exception exception)
        {
            exception = null;
            obj = default(INEEntidad);
            try
            {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string xml, out INEEntidad obj)
        {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }

        public static INEEntidad Deserialize(string xml)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(xml);
                return ((INEEntidad)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        /// <summary>
        /// Serializes current INEEntidad object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an INEEntidad object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output INEEntidad object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out INEEntidad obj, out System.Exception exception)
        {
            exception = null;
            obj = default(INEEntidad);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out INEEntidad obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static INEEntidad LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }

    /// <summary>
    /// Nodo para expresar la clave de contabilidad de aspirantes precandidatos, candidatos y concentradoras.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1064.2")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true, Namespace = "http://www.sat.gob.mx/ine")]
    public partial class INEEntidadContabilidad
    {

        private int idContabilidadField;

        private static System.Xml.Serialization.XmlSerializer serializer;

        /// <summary>
        /// Atributo para registrar la clave de contabilidad de aspirantes precandidatos, candidatos y concentradoras, si se trata de un tipo de proceso Campaña o Precampaña; o se trata de un proceso Ordinario con comité Ejecutivo Estatal.
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public int IdContabilidad
        {
            get
            {
                return this.idContabilidadField;
            }
            set
            {
                this.idContabilidadField = value;
            }
        }

        private static System.Xml.Serialization.XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(INEEntidadContabilidad));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current INEEntidadContabilidad object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an INEEntidadContabilidad object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output INEEntidadContabilidad object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out INEEntidadContabilidad obj, out System.Exception exception)
        {
            exception = null;
            obj = default(INEEntidadContabilidad);
            try
            {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string xml, out INEEntidadContabilidad obj)
        {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }

        public static INEEntidadContabilidad Deserialize(string xml)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(xml);
                return ((INEEntidadContabilidad)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        /// <summary>
        /// Serializes current INEEntidadContabilidad object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an INEEntidadContabilidad object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output INEEntidadContabilidad object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out INEEntidadContabilidad obj, out System.Exception exception)
        {
            exception = null;
            obj = default(INEEntidadContabilidad);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out INEEntidadContabilidad obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static INEEntidadContabilidad LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1064.2")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://www.sat.gob.mx/ine")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace = "http://www.sat.gob.mx/ine", IsNullable = false)]
    public enum t_ClaveEntidad
    {

        /// <comentarios/>
        [Description("AGUASCALIENTES")]
        AGU,

        /// <comentarios/>
        [Description("BAJA CALIFORNIA")]
        BCN,

        /// <comentarios/>
        [Description("BAJA CALIFORNIA SUR")]
        BCS,

        /// <comentarios/>
        [Description("CAMPECHE")]
        CAM,

        /// <comentarios/>
        [Description("CHIAPAS")]
        CHP,

        /// <comentarios/>
        [Description("CHIHUAHUA")]
        CHH,

        /// <comentarios/>
        [Description("COAHUILA")]
        COA,

        /// <comentarios/>
        [Description("COLIMA")]
        COL,

        /// <comentarios/>
        [Description("DISTRITO FEDERAL")]
        DIF,

        /// <comentarios/>
        [Description("DURANGO")]
        DUR,

        /// <comentarios/>
        [Description("GUANAJUATO")]
        GUA,

        /// <comentarios/>
        [Description("GUERRERO")]
        GRO,

        /// <comentarios/>
        [Description("HIDALGO")]
        HID,

        /// <comentarios/>
        [Description("JALISCO")]
        JAL,

        /// <comentarios/>
        [Description("MEXICO")]
        MEX,

        /// <comentarios/>
        [Description("MICHOACAN")]
        MIC,

        /// <comentarios/>
        [Description("MORELOS")]
        MOR,

        /// <comentarios/>
        [Description("NAYARIT")]
        NAY,

        /// <comentarios/>
        [Description("NUEVO LEON")]
        NLE,

        /// <comentarios/>
        [Description("OAXACA")]
        OAX,

        /// <comentarios/>
        [Description("PUEBLA")]
        PUE,

        /// <comentarios/>
        [Description("QUERETARO")]
        QTO,

        /// <comentarios/>
        [Description("QUINTANA ROO")]
        ROO,

        /// <comentarios/>
        [Description("SAN LUIS POTOSI")]
        SLP,

        /// <comentarios/>
        [Description("SINALOA")]
        SIN,

        /// <comentarios/>
        [Description("SONORA")]
        SON,

        /// <comentarios/>
        [Description("TABASCO")]
        TAB,

        /// <comentarios/>
        [Description("TAMAULIPAS")]
        TAM,

        /// <comentarios/>
        [Description("TLAXCALA")]
        TLA,

        /// <comentarios/>
        [Description("VERACRUZ")]
        VER,

        /// <comentarios/>
        [Description("YUCATAN")]
        YUC,

        /// <comentarios/>
        [Description("ZACATECAS")]
        ZAC,
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1064.2")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://www.sat.gob.mx/ine")]
    [System.Xml.Serialization.XmlRootAttribute("t_Ambito", Namespace = "http://www.sat.gob.mx/ine", IsNullable = false)]
    public enum INEEntidadAmbito
    {

        /// <comentarios/>
        [Description("LOCAL")]
        Local,

        /// <comentarios/>
        [Description("FEDERAL")]
        Federal,
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1064.2")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://www.sat.gob.mx/ine")]
    [System.Xml.Serialization.XmlRootAttribute("t_TipoProc", Namespace = "http://www.sat.gob.mx/ine", IsNullable = false)]
    public enum INETipoProceso
    {

        /// <comentarios/>
        [Description("ORDINARIO")]
        Ordinario,

        /// <comentarios/>
        [Description("PRECAMPAÑA")]
        Precampaña,

        /// <comentarios/>
        [Description("CAMPAÑA")]
        Campaña,
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1064.2")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://www.sat.gob.mx/ine")]
    [System.Xml.Serialization.XmlRootAttribute("t_TipoComite", Namespace = "http://www.sat.gob.mx/ine", IsNullable = false)]
    public enum INETipoComite
    {

        /// <comentarios/>
        [System.Xml.Serialization.XmlEnumAttribute("Ejecutivo Nacional")]
        [Description("Ejecutivo Nacional")]
        EjecutivoNacional,

        /// <comentarios/>
        [System.Xml.Serialization.XmlEnumAttribute("Ejecutivo Estatal")]
        [Description("Ejecutivo Estatal")]
        EjecutivoEstatal,

        /// <comentarios/>
        [System.Xml.Serialization.XmlEnumAttribute("Directivo Estatal")]
        [Description("Directivo Estatal")]
        DirectivoEstatal,
    }
}